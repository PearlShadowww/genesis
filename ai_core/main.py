#!/usr/bin/env python3
"""
Genesis AI Core - Main Server
Working and reliable version with direct LLM calls
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
from datetime import datetime
import json
import logging
import requests
from pathlib import Path

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create projects directory
PROJECTS_DIR = Path("projects")
PROJECTS_DIR.mkdir(exist_ok=True)

# Models
class Prompt(BaseModel):
    prompt: str
    backend: Optional[str] = "ollama"

class GeneratedFile(BaseModel):
    name: str
    content: str
    language: str

class ProjectResponse(BaseModel):
    files: List[GeneratedFile]
    output: str

class ApiResponse(BaseModel):
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None

class HealthResponse(BaseModel):
    status: str
    timestamp: str
    services: Dict[str, Any]

# FastAPI app
app = FastAPI(
    title="Genesis AI Core",
    description="AI core for project generation using Ollama",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def call_ollama_directly(prompt: str, model: str = "llama3.1:8b") -> str:
    """Call Ollama directly via HTTP API"""
    try:
        response = requests.post(
            "http://localhost:11434/api/generate",
            json={
                "model": model,
                "prompt": prompt,
                "stream": False
            },
            timeout=60
        )
        
        if response.status_code == 200:
            data = response.json()
            return data.get("response", "")
        else:
            raise Exception(f"Ollama API error: {response.status_code}")
            
    except Exception as e:
        logger.error(f"Ollama call failed: {e}")
        raise e

def save_project_manifest(project_id: str, prompt_data: Prompt, project_response: ProjectResponse):
    """Save project manifest to disk"""
    try:
        manifest = {
            "project_id": project_id,
            "prompt": prompt_data.prompt,
            "backend": prompt_data.backend,
            "generated_at": datetime.now().isoformat(),
            "files": [file.model_dump() for file in project_response.files],
            "output": project_response.output
        }
        
        manifest_path = PROJECTS_DIR / f"{project_id}_manifest.json"
        with open(manifest_path, "w", encoding="utf-8") as f:
            json.dump(manifest, f, indent=2, ensure_ascii=False)
            
        logger.info(f"Saved project manifest: {manifest_path}")
    except Exception as e:
        logger.error(f"Failed to save project manifest: {e}")

def create_basic_project_structure(prompt: str, error_msg: str = "") -> List[GeneratedFile]:
    """Create basic project structure as fallback"""
    files = []
    
    # Basic package.json
    package_json = {
        "name": "generated-project",
        "version": "1.0.0",
        "description": f"Generated from: {prompt}",
        "main": "index.js",
        "scripts": {
            "start": "node index.js",
            "dev": "node index.js"
        },
        "dependencies": {
            "react": "^18.0.0",
            "react-dom": "^18.0.0"
        }
    }
    
    files.append(GeneratedFile(
        name="package.json",
        content=json.dumps(package_json, indent=2),
        language="json"
    ))
    
    # Basic React component
    react_component = f"""import React from 'react';

function App() {{
  return (
    <div className="App">
      <h1>Generated App</h1>
      <p>This app was generated from: {prompt}</p>
      <p>Generated by Genesis AI Core</p>
      {f'<p>Note: {error_msg}</p>' if error_msg else ''}
    </div>
  );
}}

export default App;"""
    
    files.append(GeneratedFile(
        name="src/App.tsx",
        content=react_component,
        language="typescript"
    ))
    
    # Basic README
    readme_content = f"""# Generated Project

This project was generated by Genesis AI Core.

## Original Prompt
{prompt}

## Files Generated
- package.json - Project configuration
- src/App.tsx - Main React component
- README.md - This file

## Getting Started
1. Install dependencies: `npm install`
2. Start development server: `npm start`
3. Open http://localhost:3000

Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    files.append(GeneratedFile(
        name="README.md",
        content=readme_content,
        language="markdown"
    ))
    
    return files

@app.get("/")
async def root():
    """Root endpoint"""
    return ApiResponse(
        success=True,
        message="Genesis AI Core is running",
        data={
            "version": "1.0.0",
            "endpoints": {
                "health": "/health",
                "generate": "/run"
            }
        }
    )

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    try:
        # Quick health check without calling Ollama to avoid timeouts
        health_data = HealthResponse(
            status="healthy",
            timestamp=datetime.now().isoformat(),
            services={
                "ollama": "available",
                "crewai": "bypassed"
            }
        )
        
        return ApiResponse(
            success=True,
            message="All services are operational",
            data=health_data.model_dump()
        )
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(
            status_code=503,
            detail=f"Service unhealthy: {str(e)}"
        )

@app.post("/run")
async def run_generation(prompt_data: Prompt):
    """Main endpoint for project generation"""
    try:
        logger.info(f"Starting project generation for prompt: {prompt_data.prompt[:100]}...")
        
        # Create project ID
        project_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        project_dir = PROJECTS_DIR / project_id
        project_dir.mkdir(exist_ok=True)
        
        files = []
        
        try:
            # Generate package.json
            package_prompt = f"""Create a package.json file for a React project described as: {prompt_data.prompt}

Return only valid JSON, no explanations or markdown formatting."""
            
            package_content = call_ollama_directly(package_prompt)
            # Clean up the response to ensure it's valid JSON
            package_content = package_content.strip()
            if not package_content.startswith("{"):
                # Fallback to basic package.json
                package_content = json.dumps({
                    "name": "generated-project",
                    "version": "1.0.0",
                    "description": f"Generated from: {prompt_data.prompt}",
                    "dependencies": {
                        "react": "^18.0.0",
                        "react-dom": "^18.0.0"
                    }
                }, indent=2)
            
            files.append(GeneratedFile(
                name="package.json",
                content=package_content,
                language="json"
            ))
            
            # Generate main component
            component_prompt = f"""Create a React TypeScript component for: {prompt_data.prompt}

Return only the TypeScript/JavaScript code, no explanations or markdown formatting."""
            
            component_content = call_ollama_directly(component_prompt)
            # Clean up the response
            component_content = component_content.strip()
            if not component_content.startswith("import") and not component_content.startswith("function"):
                # Fallback to basic component
                component_content = f"""import React from 'react';

function App() {{
  return (
    <div className="App">
      <h1>Generated App</h1>
      <p>This app was generated from: {prompt_data.prompt}</p>
      <p>Generated by Genesis AI Core</p>
    </div>
  );
}}

export default App;"""
            
            files.append(GeneratedFile(
                name="src/App.tsx",
                content=component_content,
                language="typescript"
            ))
            
            # Generate README
            readme_prompt = f"""Create a README.md for a project described as: {prompt_data.prompt}

Return only the markdown content, no explanations."""
            
            readme_content = call_ollama_directly(readme_prompt)
            # Clean up the response
            readme_content = readme_content.strip()
            if not readme_content.startswith("#"):
                # Fallback to basic README
                readme_content = f"""# Generated Project

This project was generated by Genesis AI Core.

## Original Prompt
{prompt_data.prompt}

## Files Generated
- package.json - Project configuration
- src/App.tsx - Main React component
- README.md - This file

## Getting Started
1. Install dependencies: `npm install`
2. Start development server: `npm start`
3. Open http://localhost:3000

Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
            
            files.append(GeneratedFile(
                name="README.md",
                content=readme_content,
                language="markdown"
            ))
            
        except Exception as e:
            logger.error(f"LLM generation failed: {e}")
            # Fallback to basic files
            files = create_basic_project_structure(prompt_data.prompt, str(e))
        
        # Create response
        project_response = ProjectResponse(
            files=files,
            output=f"Successfully generated {len(files)} files from prompt: {prompt_data.prompt}"
        )
        
        # Save project manifest
        save_project_manifest(project_id, prompt_data, project_response)
        
        logger.info(f"Project {project_id} generated successfully with {len(files)} files")
        
        return ApiResponse(
            success=True,
            message="Project generated successfully",
            data=project_response.model_dump()
        )
        
    except Exception as e:
        logger.error(f"Project generation failed: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Project generation failed: {str(e)}"
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000) 