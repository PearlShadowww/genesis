#!/usr/bin/env python3
"""
Simple AI Core Server - Minimal version for testing
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
from datetime import datetime
import json

# Simple models
class Prompt(BaseModel):
    prompt: str
    backend: Optional[str] = "ollama"

class GeneratedFile(BaseModel):
    name: str
    content: str
    language: str

class ProjectResponse(BaseModel):
    files: List[GeneratedFile]
    output: str

class ApiResponse(BaseModel):
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None

class HealthResponse(BaseModel):
    status: str
    timestamp: str
    services: Dict[str, Any]

app = FastAPI(
    title="Genesis AI Core (Simple)",
    description="Simple AI core for testing",
    version="1.0.0"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    """Root endpoint"""
    return ApiResponse(
        success=True,
        message="Genesis AI Core (Simple) is running",
        data={
            "version": "1.0.0",
            "endpoints": {
                "health": "/health",
                "generate": "/run"
            }
        }
    )

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    health_data = HealthResponse(
        status="healthy",
        timestamp=datetime.now().isoformat(),
        services={
            "ollama": "available",
            "crewai": "ready"
        }
    )
    
    return ApiResponse(
        success=True,
        message="All services are operational",
        data=health_data.dict()
    )

@app.post("/run")
async def run_generation(prompt_data: Prompt):
    """Simple project generation endpoint"""
    try:
        # Generate simple files based on prompt
        files = []
        
        # Always create basic files
        files.append(GeneratedFile(
            name="package.json",
            content=json.dumps({
                "name": "generated-project",
                "version": "1.0.0",
                "description": f"Generated from: {prompt_data.prompt}",
                "dependencies": {
                    "react": "^18.0.0",
                    "react-dom": "^18.0.0"
                }
            }, indent=2),
            language="json"
        ))
        
        files.append(GeneratedFile(
            name="src/App.tsx",
            content=f"""import React from 'react';

function App() {{
  return (
    <div className="App">
      <h1>Generated App</h1>
      <p>This app was generated from: {prompt_data.prompt}</p>
      <p>Generated by Genesis AI Core</p>
    </div>
  );
}}

export default App;""",
            language="typescript"
        ))
        
        files.append(GeneratedFile(
            name="README.md",
            content=f"""# Generated Project

This project was generated by Genesis AI Core.

## Original Prompt
{prompt_data.prompt}

## Files Generated
- package.json - Project configuration
- src/App.tsx - Main React component
- README.md - This file

## Getting Started
1. Install dependencies: `npm install`
2. Start development server: `npm start`
3. Open http://localhost:3000

Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
""",
            language="markdown"
        ))
        
        # Create response
        project_response = ProjectResponse(
            files=files,
            output=f"Successfully generated {len(files)} files from prompt: {prompt_data.prompt}"
        )
        
        return ApiResponse(
            success=True,
            message="Project generated successfully",
            data=project_response.dict()
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Generation failed: {str(e)}"
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000) 